{"version":3,"sources":["n_tac_toe/game.cljs"],"mappings":"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","names":["n-tac-toe$game$TicTacToe$move$dyn","x__5393__auto__","m__5394__auto__","n-tac-toe.game/move","goog/typeOf","m__5392__auto__","cljs.core/missing-protocol","n-tac-toe$game$TicTacToe$suggest_move$dyn","n-tac-toe.game/suggest-move","n-tac-toe$game$TicTacToe$score$dyn","n-tac-toe.game/score","n-tac-toe$game$TicTacToe$win_QMARK_$dyn","n-tac-toe.game/win?","n-tac-toe.game/TicTacToe","this","c","y","x","this__5343__auto__","k__5344__auto__","this__5345__auto__","k37164","else__5346__auto__","G__37168","cljs.core/Keyword","rows","cljs.core.get","__extmap","this__5363__auto__","f__5364__auto__","init__5365__auto__","cljs.core.reduce","ret__5366__auto__","p__37169","vec__37170","k__5367__auto__","cljs.core.nth","v__5368__auto__","this__5358__auto__","writer__5359__auto__","opts__5360__auto__","pr-pair__5361__auto__","keyval__5362__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__37163","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5341__auto__","__meta","this__5338__auto__","__hash","this__5347__auto__","cljs.core/count","this__5339__auto__","h__5154__auto__","coll__5340__auto__","cljs.core/hash-unordered-coll","this37165","other37166","cljs.core._EQ_","this__5353__auto__","k__5354__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5350__auto__","G__37173","this__5351__auto__","k__5352__auto__","pred__37174","cljs.core/keyword-identical?","expr__37175","cljs.core.assoc","this__5356__auto__","cljs.core/seq","cljs.core/MapEntry","this__5342__auto__","this__5348__auto__","entry__5349__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","n-tac-toe.game/Board","this__5389__auto__","cljs.core/List","writer__5390__auto__","cljs.core/-write","G__37167","extmap__5385__auto__","G__37177","cljs.core/record?","n-tac-toe.game/->Board","n-tac-toe.game/map->Board","k37179","G__37183","p__37184","vec__37185","G__37178","this37180","other37181","G__37188","pred__37189","expr__37190","n-tac-toe.game/MetaBoard","G__37182","G__37192","n-tac-toe.game/->MetaBoard","n-tac-toe.game/map->MetaBoard","n-tac-toe.game/new-game","n","n2","Math/pow","cljs.core.repeat","cljs.core.take","cljs.core.partition_all","cljs.core.map","p1__37193#","clojure.walk/prewalk","cljs.core/sequential?","cljs.core/PROTOCOL_SENTINEL","p__37204","map__37205","cljs.core/--destructure-map","map__37206","board","x__5130__auto__","y__5131__auto__","cljs.core/assoc-in","p__37207","map__37208","map__37209","p1__37196#","p2__37195#","scores","p1__37194#","cljs.core/select-keys","cljs.core.filter","cljs.core.sort_by","cljs.core.comp","cljs.core/max","cljs.core/vals","cljs.core/>","p-first-nil","or__5045__auto__","G__37213","vec__37214","seq__37215","first__37216","cljs.core/first","cljs.core/next","vec__37235","seq__37236","first__37237","s","rest","temp__5802__auto__","move","ocr-37238","cljs.core/native-satisfies?","cljs.core/ILookup","ocr-37238_dir__37243","cljs.core.match/backtrack","e37247","js/Error","e__29622__auto__","e37248","ocr-37238_n__37244","cljs.core.not_EQ_","e37252","e37249","e37251","e37250","e37245","cljs.core/meta","temp__5804__auto__","yx","cljs.core.range","cljs.core/get","cljs.core.keep_indexed","cljs.core/reverse","p1__37197#","ry","cljs.core/rand-int","rx","cljs.core.get_in","p__37253","map__37254","map__37255","fwd-diag","cljs.core/with-meta","cljs.core/frequencies","rev-diag","row-scores","p1__37199#","p2__37198#","cljs.core.map_indexed","col-scores","p1__37200#","p1__37202#","p2__37201#","cljs.core/cons","p1__37203#","p__37256","map__37257","map__37258","cljs.core.mapcat","cljs.core/last","p__37260","map__37261","map__37262","p__37263","map__37264","map__37265","cljs.core/identity","p__37266","map__37267","map__37268","p1__37259#"],"sourcesContent":["(ns n-tac-toe.game\n  (:require\n   [clojure.walk :as walk]\n   [clojure.core.match :as match]\n   [cljs.pprint :as pprint]))\n\n;; game\n\n(defprotocol TicTacToe\n  \"The meta tic-tac-toe game. There are two types of boards:\n   A regular nxn tic-tac-toe board (vec of vec of chars)\n   A nxn board of regular tic-tac-toe boards (where each space is a Board)\n   A nxn board is won by winning each game for a space for either X or O, e.g.\n   X wins all spaces in a row, or diagonally, etc.\"\n  (move\n    [this c y x])\n  (suggest-move\n    [this c])\n  (score\n    [this])\n  (win?\n    [this]))\n\n(defrecord Board\n           [rows])\n\n(defrecord MetaBoard\n           [rows])\n\n(defn new-game\n  \"Makes an empty game\"\n  [n]\n  (let [n2 (Math/pow n 2)]\n    (->MetaBoard (->>\n                  ;; make nxn nils\n                  (repeat nil)\n                  (take n2)\n                  ;; partition into a board\n                  (partition-all n)\n                  repeat\n                  ;; using a stream of empty boards, take nxn empty boards\n                  (take n2)\n                  (map ->Board)\n                  (partition-all n)\n                  ;; convert everything into vecs\n                  (walk/prewalk\n                   #(if (sequential? %)\n                      (into [] %)\n                      %))))))\n\n(extend-type Board\n  TicTacToe\n  (move [{:keys [rows] :as board} c y x]\n    (if (< (max y x) (count rows))\n      (->Board (assoc-in rows [y x] c))\n      board))\n  (suggest-move\n    [{:keys [rows] :as board} c]\n    (let [n (count rows)\n          ;; order scores by highest for char\n          scores (->> (score board)\n                      (map #(select-keys % [c]))\n                      (filter not-empty)\n                      (sort-by (comp max vals) >))\n          p-first-nil #(when (nil? %2)\n                         %1)]\n      (or\n       (loop [[s & rest] scores]\n         (if-let [move (match/match [(meta s)]\n                         [{:dir :fwd-diag}] (when-let [yx (->> (range n)\n                                                               (map get rows)\n                                                               (keep-indexed p-first-nil)\n                                                               first)]\n                                              [yx yx])\n                         [{:dir :rev-diag}] (when-let [yx (->> (range n)\n                                                               (map get (reverse rows))\n                                                               (keep-indexed p-first-nil)\n                                                               first)]\n                                              [yx yx])\n                         [{:dir :col :n x}] (when-let [y (->> rows\n                                                              (map #(get % x))\n                                                              (keep-indexed p-first-nil)\n                                                              first)]\n                                              [y x])\n                         [{:dir :row :n y}] (when-let [x (->> (get rows y)\n                                                              (keep-indexed p-first-nil)\n                                                              first)]\n                                              [y x])\n                         :else nil)]\n           move\n           (when (seq rest)\n             (recur rest))))\n       (loop [ry (rand-int n)\n              rx (rand-int n)]\n         (if (nil? (get-in rows [ry rx]))\n           [ry rx]\n           (recur (rand-int n) (rand-int n)))))))\n  (score [{:keys [rows]}]\n    (let [n (count rows)\n          fwd-diag (with-meta\n                     (->> (range n)\n                          (map get rows)\n                          frequencies)\n                     {:dir :fwd-diag})\n          rev-diag (with-meta\n                     (->> (range n)\n                          (map get (reverse rows))\n                          frequencies)\n                     {:dir :rev-diag})\n          row-scores (map-indexed #(with-meta\n                                     (frequencies %2)\n                                     {:dir :row\n                                      :n %1}) rows)\n          col-scores (->> (range n)\n                          (map #(map get rows (repeat n %)))\n                          (map-indexed #(with-meta\n                                          (frequencies %2)\n                                          {:dir :col\n                                           :n %1})))]\n      (->> (concat row-scores col-scores)\n           (cons fwd-diag)\n           (cons rev-diag)\n           (map #(dissoc % nil))\n           (filter not-empty))))\n  (win? [{:keys [rows] :as board}]\n    (->> (score board)\n         (mapcat seq)\n         (filter (comp #{(count rows)} last))\n         first)))\n\n(extend-type MetaBoard\n  TicTacToe\n  (move [{:keys [rows]} ^Board board y x]\n    (->MetaBoard (assoc-in rows [y x] board)))\n  (win? [{:keys [rows]}]\n    (->> rows\n         (mapcat identity)\n         (map win?)\n         (filter identity)\n         first))\n  (score [{:keys [rows]}]\n    (mapcat #(mapcat score %) rows)))\n\n(comment\n  (require '[clojure.pprint :as pprint])\n\n  (let [another-board (->Board [[nil \\o nil]\n                                [\\o \\x \\o]\n                                [\\o \\o nil]])]\n    (move another-board \\x 2 2))\n\n  (let [almost (->Board [[\\x \\o \\o]\n                         [\\o \\x \\o]\n                         [\\o \\o nil]])\n        diag-fwd (->Board [[\\x \\o \\o]\n                           [\\o \\x \\o]\n                           [\\o \\o \\x]])\n        diag-bwd (->Board [[\\x \\o \\o]\n                           [\\o \\o \\x]\n                           [\\o \\o \\x]])\n        almost-meta (->MetaBoard [[diag-fwd diag-bwd diag-bwd]\n                                  [diag-bwd diag-fwd diag-bwd]\n                                  [diag-bwd diag-bwd almost]])]\n    (score almost-meta))\n\n  ;; win states\n  (let [{:keys [diag-bwd diag-fwd] :as states} {:diag-fwd (->Board [[\\x \\o \\o]\n                                                                    [\\o \\x \\o]\n                                                                    [\\o \\o \\x]])\n                                                :diag-bwd (->Board [[\\x \\o \\o]\n                                                                    [\\o \\o \\x]\n                                                                    [\\o \\o \\x]])\n                                                :row (->Board [[\\o \\o \\o]\n                                                               [\\o \\x \\x]\n                                                               [\\x \\o \\x]])\n                                                :col (->Board [[\\x \\x \\o]\n                                                               [\\o \\x \\x]\n                                                               [\\x \\x \\o]])}\n        states (assoc\n                states\n                  ;; diag-fwd was won by x\n                :meta-win (->MetaBoard [[diag-fwd diag-bwd diag-bwd]\n                                        [diag-bwd diag-fwd diag-bwd]\n                                        [diag-bwd diag-bwd diag-fwd]]))]\n    (reduce-kv (fn [m k v]\n                 (assoc m k (win? v)))\n               {}\n               states))\n\n  ;; move\n  (let [almost (->Board [[\\x \\o \\o]\n                         [\\o \\x \\o]\n                         [\\o \\o nil]])\n        diag-fwd (->Board [[\\x \\o \\o]\n                           [\\o \\x \\o]\n                           [\\o \\o \\x]])\n        diag-bwd (->Board [[\\x \\o \\o]\n                           [\\o \\o \\x]\n                           [\\o \\o \\x]])\n        almost-meta (->MetaBoard [[diag-fwd diag-bwd diag-bwd]\n                                  [diag-bwd diag-fwd diag-bwd]\n                                  [diag-bwd diag-bwd almost]])]\n    {:almost-win (win? almost)\n     :won (win?\n           (move almost \\x 2 2))\n     :almost-win-meta (win? almost-meta)\n     :won-meta (let [last (get-in (:rows almost-meta)\n                                  [2 2])]\n                 (win?\n                  (move almost-meta\n                        (move last \\x 2 2) 2 2)))}))"]}