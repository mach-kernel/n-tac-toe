{"version":3,"sources":["sci/impl/io.cljc"],"mappings":"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","names":["var_args","G__28712","sci.impl.io/core-dynamic-var","js/Error","name","sci.impl.io.core_dynamic_var","init-val","sci.impl.vars.dynamic_var","sci.impl.vars/clojure-core-ns","sci.impl.io/in","*unrestricted*-orig-val__28715","*unrestricted*-temp-val__28716","sci.impl.unrestrict/*unrestricted*","G__28720","sci.impl.vars/unbind","sci.impl.io/out","*unrestricted*-orig-val__28722","*unrestricted*-temp-val__28723","G__28725","sci.impl.io/err","*unrestricted*-orig-val__28726","*unrestricted*-temp-val__28727","G__28730","sci.impl.io/print-fn","*unrestricted*-orig-val__28732","*unrestricted*-temp-val__28733","G__28735","sci.impl.io/print-meta","sci.impl.io/print-length","sci.impl.io/print-level","sci.impl.io/print-namespace-maps","sci.impl.io/flush-on-newline","cljs.core/*flush-on-newline*","sci.impl.io/print-readably","cljs.core/*print-readably*","sci.impl.io/print-newline","cljs.core/*print-newline*","sci.impl.io/string-print","x","*print-fn*-orig-val__28742","*print-fn*-temp-val__28743","cljs.core/deref","cljs.core/*print-fn*","cljs.core/string-print","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","sci.impl.io/pr","seq28744","self__5755__auto__","cljs.core/seq","objs","*print-fn*-orig-val__28748","*print-length*-orig-val__28749","*print-level*-orig-val__28750","*print-meta*-orig-val__28751","*print-namespace-maps*-orig-val__28752","*print-readably*-orig-val__28753","*print-newline*-orig-val__28754","*print-fn*-temp-val__28755","*print-length*-temp-val__28756","*print-level*-temp-val__28757","*print-meta*-temp-val__28758","*print-namespace-maps*-temp-val__28759","*print-readably*-temp-val__28760","*print-newline*-temp-val__28761","cljs.core/*print-length*","cljs.core/*print-level*","cljs.core/*print-meta*","cljs.core/*print-namespace-maps*","cljs.core.apply","cljs.core/pr","sci.impl.io/flush","sci.impl.io/newline","*print-fn*-orig-val__28766","*print-fn*-temp-val__28767","cljs.core.newline","sci.impl.io/pr-str","seq28774","*print-length*-orig-val__28779","*print-level*-orig-val__28780","*print-meta*-orig-val__28781","*print-namespace-maps*-orig-val__28782","*print-readably*-orig-val__28783","*print-newline*-orig-val__28784","*print-length*-temp-val__28785","*print-level*-temp-val__28786","*print-meta*-temp-val__28787","*print-namespace-maps*-temp-val__28788","*print-readably*-temp-val__28789","*print-newline*-temp-val__28790","cljs.core/pr-str","sci.impl.io/prn","seq28793","*print-fn*-orig-val__28800","*print-length*-orig-val__28801","*print-level*-orig-val__28802","*print-meta*-orig-val__28803","*print-namespace-maps*-orig-val__28804","*print-readably*-orig-val__28805","*print-newline*-orig-val__28806","*print-fn*-temp-val__28807","*print-length*-temp-val__28808","*print-level*-temp-val__28809","*print-meta*-temp-val__28810","*print-namespace-maps*-temp-val__28811","*print-readably*-temp-val__28812","*print-newline*-temp-val__28813","cljs.core/prn","sci.impl.io/prn-str","seq28828","*print-length*-orig-val__28834","*print-level*-orig-val__28835","*print-meta*-orig-val__28836","*print-namespace-maps*-orig-val__28837","*print-readably*-orig-val__28838","*print-newline*-orig-val__28839","*print-length*-temp-val__28840","*print-level*-temp-val__28841","*print-meta*-temp-val__28842","*print-namespace-maps*-temp-val__28843","*print-readably*-temp-val__28844","*print-newline*-temp-val__28845","cljs.core/prn-str","sci.impl.io/print","seq28869","*print-fn*-orig-val__28872","*print-length*-orig-val__28873","*print-level*-orig-val__28874","*print-namespace-maps*-orig-val__28875","*print-readably*-orig-val__28876","*print-newline*-orig-val__28877","*print-fn*-temp-val__28878","*print-length*-temp-val__28879","*print-level*-temp-val__28880","*print-namespace-maps*-temp-val__28881","*print-readably*-temp-val__28882","*print-newline*-temp-val__28883","cljs.core/print","sci.impl.io/print-str","seq28887","*print-length*-orig-val__28889","*print-level*-orig-val__28890","*print-meta*-orig-val__28891","*print-namespace-maps*-orig-val__28892","*print-readably*-orig-val__28893","*print-newline*-orig-val__28894","*print-length*-temp-val__28895","*print-level*-temp-val__28896","*print-meta*-temp-val__28897","*print-namespace-maps*-temp-val__28898","*print-readably*-temp-val__28899","*print-newline*-temp-val__28900","cljs.core/print-str","sci.impl.io/println","seq29094","*print-fn*-orig-val__29101","*print-length*-orig-val__29102","*print-level*-orig-val__29103","*print-meta*-orig-val__29104","*print-namespace-maps*-orig-val__29105","*print-readably*-orig-val__29106","*print-newline*-orig-val__29107","*print-fn*-temp-val__29108","*print-length*-temp-val__29109","*print-level*-temp-val__29110","*print-meta*-temp-val__29111","*print-namespace-maps*-temp-val__29112","*print-readably*-temp-val__29113","*print-newline*-temp-val__29114","cljs.core/println","sci.impl.io/with-out-str","cljs.core.sequence","cljs.core.concat","cljs.core/List","cljs.core/vec","seq29133","G__29137","cljs.core/first","cljs.core/next","G__29138","self__5754__auto__","_","body","sci.impl.utils/allowed-append"],"sourcesContent":["(ns sci.impl.io\n  {:no-doc true}\n  (:refer-clojure :exclude [pr prn pr-str prn-str print print-str println\n                            newline flush with-out-str with-in-str read-line\n                            printf #?@(:cljs [string-print])])\n  (:require #?(:cljs [goog.string])\n            [sci.impl.unrestrict :refer [*unrestricted*]]\n            #?(:cljs [sci.impl.utils :as utils])\n            [sci.impl.vars :as vars]))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defn core-dynamic-var\n  \"create a dynamic var with clojure.core :ns meta\"\n  ([name] (core-dynamic-var name nil))\n  ([name init-val] (vars/dynamic-var name init-val {:ns vars/clojure-core-ns})))\n\n(def in (binding [*unrestricted* true]\n          (doto (core-dynamic-var '*in*)\n            (vars/unbind))))\n\n(def out (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*out*)\n             (vars/unbind))))\n\n(def err (binding [*unrestricted* true]\n           (doto (core-dynamic-var '*err*)\n             (vars/unbind))))\n\n#?(:cljs\n   (def print-fn\n     (binding [*unrestricted* true]\n       (doto (core-dynamic-var '*print-fn*)\n         (vars/unbind)))))\n\n;; TODO: CLJS print-err-fn\n;; TODO: CLJS print-fn-bodies\n\n(def print-meta\n  (core-dynamic-var '*print-meta* false))\n\n(def print-length (core-dynamic-var '*print-length*))\n(def print-level (core-dynamic-var '*print-level*))\n(def print-namespace-maps (core-dynamic-var '*print-namespace-maps* true))\n(def flush-on-newline (core-dynamic-var '*flush-on-newline* *flush-on-newline*))\n(def print-readably (core-dynamic-var '*print-readably* *print-readably*))\n#?(:cljs (def print-newline (core-dynamic-var '*print-newline* *print-newline*)))\n\n#?(:cljs (defn string-print [x]\n           (binding [*print-fn* @print-fn]\n             (cljs.core/string-print x))) )\n\n#?(:clj (defn pr-on\n          {:private true\n           :static true}\n          [x w]\n          (if *print-dup*\n            (print-dup x w)\n            (print-method x w))\n          nil))\n\n#?(:clj (defn pr\n          ([] nil)\n          ([x]\n           (binding [*print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably]\n             (pr-on x @out)))\n          ([x & more]\n           (pr x)\n           (. ^java.io.Writer @out (append \\space))\n           (if-let [nmore (next more)]\n             (recur (first more) nmore)\n             (apply pr more))))\n   :cljs (defn pr\n           [& objs]\n           (binding [*print-fn* @print-fn\n                     *print-length* @print-length\n                     *print-level* @print-level\n                     *print-meta* @print-meta\n                     *print-namespace-maps* @print-namespace-maps\n                     *print-readably* @print-readably\n                     *print-newline* @print-newline]\n             (apply cljs.core/pr objs))))\n\n#?(:clj\n   (defn flush\n     []\n     (. ^java.io.Writer @out (flush))\n     nil)\n   :cljs (defn flush [] ;stub\n           nil))\n\n#?(:cljs (declare println))\n\n#?(:clj (defn newline\n          []\n          (. ^java.io.Writer @out (append ^String @#'clojure.core/system-newline))\n          nil)\n   :cljs (defn newline\n           []\n           (binding [*print-fn* @print-fn]\n             (cljs.core/newline))))\n\n#?(:clj\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply pr xs))\n       (str sw)))\n   :cljs\n   (defn pr-str\n     \"pr to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline]\n       (apply cljs.core/pr-str objs))))\n\n#?(:clj\n   (defn prn\n     [& more]\n     (apply pr more)\n     (newline)\n     (when @flush-on-newline\n       (flush)))\n   :cljs\n   (defn prn\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline]\n       (apply cljs.core/prn objs))))\n\n#?(:clj\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply prn xs))\n       (str sw)))\n   :cljs\n   (defn prn-str\n     \"prn to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline]\n       (apply cljs.core/prn-str objs))))\n\n#?(:clj\n   (defn print\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply pr more)))\n   :cljs\n   (defn print\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* nil\n               *print-newline* @print-newline]\n       (apply cljs.core/print objs))))\n\n#?(:clj\n   (defn print-str\n     \"print to a string, returning it\"\n     [& xs]\n     (let [sw (java.io.StringWriter.)]\n       (vars/with-bindings {out sw}\n         (apply print xs))\n       (str sw)))\n   :cljs\n   (defn print-str\n     \"print to a string, returning it\"\n     [& objs]\n     (binding [*print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline]\n       (apply cljs.core/print-str objs))))\n\n#?(:clj\n   (defn println\n     [& more]\n     (vars/with-bindings {print-readably nil}\n       (apply prn more)))\n   :cljs\n   (defn println\n     [& objs]\n     (binding [*print-fn* @print-fn\n               *print-length* @print-length\n               *print-level* @print-level\n               *print-meta* @print-meta\n               *print-namespace-maps* @print-namespace-maps\n               *print-readably* @print-readably\n               *print-newline* @print-newline]\n       (apply cljs.core/println objs))))\n\n#?(:clj\n   (defn printf\n     [fmt & args]\n     (print (apply format fmt args))))\n\n(defn with-out-str\n  [_ _ & body]\n  `(let [s# (new #?(:clj java.io.StringWriter\n                   :cljs goog.string.StringBuffer))]\n     #?(:clj\n        (binding [*out* s#]\n          ~@body\n          (str s#))\n        :cljs\n        (binding [*print-newline* true\n                  *print-fn* (fn [x#]\n                               (. s# ~utils/allowed-append x#))]\n          ~@body\n          (str s#)))))\n\n#?(:clj\n   (defn with-in-str\n     [_ _ s & body]\n     `(with-open [s# (-> (java.io.StringReader. ~s) clojure.lang.LineNumberingPushbackReader.)]\n        (binding [*in* s#]\n          ~@body))))\n\n#?(:clj\n   (defn read-line\n     []\n     (if (instance? clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^clojure.lang.LineNumberingPushbackReader @in)\n       (.readLine ^java.io.BufferedReader @in))))\n"]}