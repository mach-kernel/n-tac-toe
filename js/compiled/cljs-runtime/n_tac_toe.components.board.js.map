{"version":3,"sources":["n_tac_toe/components/board.cljs"],"mappings":"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","names":["p__38664","map__38665","cljs.core/--destructure-map","cljs.core.get","n-tac-toe.components.board/make-buttons-and-coords","rows","board","map__38666","vec__38667","cljs.core.nth","vec__38670","cljs.core/deref","vec__38673","n","cljs.core/count","coords","iter__5523__auto__","s__38677","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","xs__6360__auto__","cljs.core/first","iterys__5519__auto__","s__38679","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","b__38681","cljs.core/chunk-buffer","i__38680","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__38678","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","fs__5520__auto__","cljs.core.concat","iter__38676","y1","cljs.core.range","x1","coord","cljs.core/meta","yb","xb","allowed","re_frame.core.subscribe","win?","ya","xa","won","_","cljs.core.mapcat","cljs.core/identity","cljs.core.interleave","cljs.core.partition_all","p1__38663#","cljs.core.mapv","vec__38682","vec__38685","y","x","cell","coord-meta","disabled","or__5045__auto__","cljs.core._EQ_","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","n-tac-toe.game/TicTacToe","G__38689","cljs.core/with-meta","re-frame.core/dispatch","and__5043__auto__","cljs.core/not-empty","cljs.core/vec","n-tac-toe.components.board/board","cells","cljs.core/sequential?","cljs.core.get_in","p1__38690#","cljs.core.map","maybe-seq","cljs.core.into","clojure.walk/prewalk","tableify","p1__38691#","delazy","cljs.core/chunk-first"],"sourcesContent":["(ns n-tac-toe.components.board\n  (:require [clojure.walk :as walk]\n            [re-frame.core :as re-frame]\n            [n-tac-toe.game :as game :refer [TicTacToe]]\n            [n-tac-toe.events :as events]\n            [n-tac-toe.subs :as subs]))\n\n(defn- make-buttons-and-coords\n  \"Makes buttons to play game, annotates coord metadata\n   to child boards and hiccup fragments\"\n  [^TicTacToe {:keys [rows] :as board}]\n  (let [n (count rows)\n        coords (for [y1 (range n)\n                     x1 (range n)]\n                 [y1 x1])\n        {:keys [coord]} (meta board)\n        [yb xb] coord\n        allowed (re-frame/subscribe [::subs/allowed])\n        win? (re-frame/subscribe [::subs/win?])\n        [ya xa] @allowed\n        [won _] @win?]\n    (->> rows\n         (mapcat identity)\n         (interleave coords)\n         (partition-all 2)\n         (mapv #(let [[[y x] cell] %\n                      coord-meta {:coord [y x]}\n                      disabled (or\n                                won\n                                (not (nil? cell))\n                                (not (and (= yb ya)\n                                          (= xa xb))))\n                      cell (if (satisfies? TicTacToe cell)\n                             (make-buttons-and-coords (with-meta cell coord-meta))\n                             [:td\n                              [:button\n                               {:on-click (fn []\n                                            (re-frame/dispatch [::events/play \\x yb xb y x]))\n                                :disabled disabled\n                                :class (str\n                                        \"h-100 w-100 ttu \"\n                                        (when-not disabled\n                                          \"grow hover-bg-washed-green \")\n                                        (if disabled\n                                          \"ba b--light-gray \"\n                                          \"ba b--green \")\n                                        (when (and (not-empty won)\n                                                   (= cell won))\n                                          \"bg-washed-green \"))}\n                               [:p {:class \"b ma3 f4 lh-copy\"} (or cell [:span {:class \"pa3\"}])]]])]\n                  (with-meta cell coord-meta)))\n         (partition-all n)\n         (mapv vec))))\n\n(comment\n  (let [{:keys [rows] :as new-game} (game/new-game 3)]\n    (make-buttons-and-coords new-game)))\n\n(defn board\n  [^TicTacToe board]\n  (letfn [(tableify\n            [cells]\n            (if (and (sequential? cells)\n                        ;; board -> row -> cells (which are hiccup tds)\n                     (= :td (get-in cells [0 0 0])))\n                 ;; cells of buttons with values into cells\n                 ;; with entire tables\n              [:td (->> cells\n                        (map #(cons :tr %))\n                        (concat [:table {:class \"h-100 w-100\"}]))]\n              cells))\n          (delazy\n            [maybe-seq]\n            (if (sequential? maybe-seq)\n              (into [] maybe-seq)\n              maybe-seq))]\n        ;; cells of tables into a table with rows of table cells\n    [:div {:class \"h-100 w-80 center\"} (->> (make-buttons-and-coords board)\n                                            (walk/prewalk tableify)\n                                            (map #(cons :tr %))\n\n                                            (concat [:table {:class \"h-100 w-100\"}])\n                                            (walk/prewalk delazy))]))\n"]}