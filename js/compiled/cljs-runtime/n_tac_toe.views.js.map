{"version":3,"sources":["n_tac_toe/views.cljs"],"mappings":";AAWA,6BAAA,7BAAMA;AAAN,AACE,IAAMC,OAAK,sDAAA,mFAAA,zIAACC;IACNC,aAAK,sDAAA,mFAAA,zIAACD;AADZ,AAAA,0FAAA,mDAAA,2CAAA,wDAAA,qCAAA,mFAAA,kDAAA,2CAAA,wDAAA,sBAAA,oBAKG,iBAAAE,qBAAA,AAAAC,gBAAuBF;AAAvB,AAAA,oBAAAC;AAAA,AAAA,IAAAE,aAAAF;aAAA,AAAAG,4CAAAD,WAAA,IAAA,pEAAYE;QAAZ,AAAAD,4CAAAD,WAAA,IAAA,/DAAmBG;AAAnB,AAAA,0FAAA,iDAAA,2CAAA,wDACe,CAAA,cAEC,4DAAA,QAAA,lEAAI,oDAAA,pDAACC,6CAAEF,8CAEI,qDAAA,RAAKA;;AALhC;;KAMA,kBAAM,iBAAAG,mBAAI,cAAA,AAAAN,dAACO,8BAAKX;AAAV,AAAA,GAAAU;AAAAA;;AAAA,OAAAN,gBACKF;;MADX,AAAA,mFAAA,yDAAA,2CAAA,6DAAA;AAAA,AAGe,8BAAA,mFAAA,1GAACU;WAHhB,mBAAA,MAKA,kBAAA,AAAAR,uBAAA,AAAA,oHAAA,AAAAA,8BAAA,zJAAOJ,0FACJa,iDAAOb;;AAEf,AAAAc,oEAAA,iEAAA;AAAA,AAAA,0FAAyCf;;AAIzC,8BAAA,9BAAMgB;AAAN,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,kCAAA,mFAAA,mDAAA,mFAAA,gDAAA,2CAAA,6DAAA;AAAA,AAKoB,8BAAA,mFAAA,4FAAA,tMAACH;WALrB;;AAQA,AAAAE,oEAAA,kEAAA;AAAA,AAAA,0FAA0CC;;AAI1C,6BAAA,7BAAMC;AAAN,AACE,IAAMC,eAAa,sDAAA,mFAAA,zIAAChB;AAApB,AACE,6DAAA,AAAAG,tDAACU,sEAAeG","names":["n-tac-toe.views/home-panel","game","re_frame.core.subscribe","win?","temp__5804__auto__","cljs.core/deref","vec__38694","cljs.core.nth","player","_","cljs.core._EQ_","or__5045__auto__","cljs.core/not","re-frame.core/dispatch","n-tac-toe.components.board/board","n-tac-toe.routes/panels","n-tac-toe.views/about-panel","n-tac-toe.views/main-panel","active-panel"],"sourcesContent":["(ns n-tac-toe.views\n  (:require\n   [re-frame.core :as re-frame]\n   [n-tac-toe.events :as events]\n   [n-tac-toe.routes :as routes]\n   [n-tac-toe.subs :as subs]\n   [n-tac-toe.components.board :refer [board]]))\n\n\n;; home\n\n(defn home-panel []\n  (let [game (re-frame/subscribe [::subs/game])\n        win? (re-frame/subscribe [::subs/win?])]\n    [:div\n     {:class \"sans-serif h-100 w-100 pa2\"}\n     [:h1 {:class \"f1 lh-title\"} \"n-tac-toe\"]\n     (when-let [[player _] @win?]\n       [:h2 {:class (str \n                     \"f3 lh-copy \"\n                     (if (= player \\x)\n                       \"green\"\n                       \"red\"))} (str player \" wins!\")])\n     (when (or (not @game)\n               @win?)\n       [:button\n        {:on-click #(re-frame/dispatch [::events/new-game])}\n        \"New game\"])\n     (when @game\n       [board @game])]))\n\n(defmethod routes/panels :home-panel [] [home-panel])\n\n;; about\n\n(defn about-panel []\n  [:div\n   [:h1 \"This is the About Page.\"]\n\n   [:div\n    [:a {:on-click #(re-frame/dispatch [::events/navigate :home])}\n     \"go to Home Page\"]]])\n\n(defmethod routes/panels :about-panel [] [about-panel])\n\n;; main\n\n(defn main-panel []\n  (let [active-panel (re-frame/subscribe [::subs/active-panel])]\n    (routes/panels @active-panel)))\n"]}